#!/bin/bash

set -e

if [ $(id -u) != 0 ]; then
    echo run as root
    exit 1
fi

QUIRK_VAL="0x4d9:0x1400:0x4"
QUIRK_PARAM="usbhid.quirks=$QUIRK_VAL"

if ! grep -Fq " $QUIRK_PARAM" /proc/cmdline ; then
    # checks which config file is present to figure out what bootloader is used
    # then stores the file's location and where to add kernel command line parameters in it
    # GRUB
    if [ -e /etc/default/grub ]; then
        CONFIG_LOC="/etc/default/grub"
        OPTIONS_LINE='/^(GRUB_CMDLINE_LINUX_DEFAULT=".*)("\s*$)/'
    # systemd-boot
    elif [ -e /boot/loader/entries/arch.conf ]; then
        CONFIG_LOC="/boot/loader/entries/arch.conf"
        OPTIONS_LINE='/^(options.*)(\s*$)/'
    else
        echo "ERROR: Update this script to support patching wherever the kernel command line arguments should go"
        exit 1
    fi

    if ! grep -Fq " $QUIRK_PARAM" $CONFIG_LOC ; then
    # Install
    echo "Setup kernel cmdline to not use usbhid module for our mouse.."
        if ! perl -i.usbmouse-bak -e '
        while(<>) {
          if ('$OPTIONS_LINE') {
            my ($x,$y)=($1,$2);
            $found=1;
            if ($x !~ m!usbhid.quirks!) {
              $_ = $x." '"$QUIRK_PARAM"'".$y;
            }
          }
          print;
        }
        exit(1) unless($found);
      ' $CONFIG_LOC ; then
    	    echo "ERROR: Failed to patch kernel cmdline!"
    	    exit 1
	fi
    fi
fi

if [ -e /sys/module/usbhid ]; then
    # reload usbhid module if necessary so we don't need to reboot
    if ! grep -Fq "$QUIRK_VAL" /sys/module/usbhid/parameters/quirks ; then
	echo "Reload usbhid module to tell it not to attach our mouse.."
	if modprobe -r usbhid ; then
	    modprobe usbhid quirks=0x4d9:0x1400:0x4
	else
	    echo "- ERROR: Unable to reload module usbhid - you need to reboot for things to take effect"
	    exit 3
	fi
    fi
fi

# unload old if any
[ ! -e /sys/module/marblefx ] || rmmod marblefx

echo "Installing our driver.."
insmod marblefx.ko
dmesg | tail | grep -EB 1 'registered new interface driver marblefx' | tail -n 2 | grep -E 'registered new|TrackMan'

echo "Tweaking scrolling distance.."
for i in `seq 10` ; do
    device=$(xinput list --id-only "USB HIDBP Logitech TrackMan Marble FX Mouse @xkr47 04d9:1400" 2>/dev/null ||:)
    [ ! "$device" ] || break
    sleep 0.1
done
if [ ! "$device" ]; then
    echo "Unable to find xinput device id, unable to tweak scrolling"
    exit 2
fi
xinput set-prop $device "Evdev Scrolling Distance" 8 8 1
